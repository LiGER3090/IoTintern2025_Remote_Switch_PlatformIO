import threading
import asyncio
import paho.mqtt.client as mqtt
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os
import platform

TOKEN = "YOUR TOKEN"
MQTT_BROKER = "YOUR IP"
MQTT_PORT = 1883
MQTT_USER = "YOUR USER"
MQTT_PASS = "YOUR PASSWORD"
MQTT_TOPIC_CONTROL = "YOUR TOPIC"
MQTT_TOPIC_SHUTDOWN = "YOUR TOPIC"

mqtt_client = mqtt.Client()
mqtt_client.username_pw_set(MQTT_USER, MQTT_PASS)

def on_connect(client, userdata, flags, rc):
    print("MQTT connected with code", rc)
    client.subscribe(MQTT_TOPIC_SHUTDOWN)

def on_message(client, userdata, msg):
    message = msg.payload.decode()
    print(f"Received MQTT message: {message}")
    if message.lower() == "shutdown":
        print("Shutting down system...")
        if platform.system() == "Windows":
            os.system("shutdown /s /t 1")
        elif platform.system() == "Linux":
            os.system("shutdown now")
        else:
            print("Unsupported OS")

mqtt_client.on_connect = on_connect
mqtt_client.on_message = on_message

def mqtt_loop():
    mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
    mqtt_client.loop_forever()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Бот активен. Используй команды /on, /off, /shutdown")

async def turn_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mqtt_client.publish(MQTT_TOPIC_CONTROL, "on")
    await update.message.reply_text("Отправлено: ON")

async def turn_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mqtt_client.publish(MQTT_TOPIC_CONTROL, "off")
    await update.message.reply_text("Отправлено: OFF")

async def shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mqtt_client.publish(MQTT_TOPIC_SHUTDOWN, "shutdown")
    await update.message.reply_text("Отправлена команда выключения ноутбука")

if __name__ == "__main__":
    # Запускаем MQTT в отдельном потоке
    threading.Thread(target=mqtt_loop, daemon=True).start()

    # Создаём приложение Telegram-бота
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("on", turn_on))
    app.add_handler(CommandHandler("off", turn_off))
    app.add_handler(CommandHandler("shutdown", shutdown))

    print("Запускаем Telegram-бота...")
    # Запускаем бота напрямую, без asyncio.run и loop.run_until_complete
    app.run_polling()
